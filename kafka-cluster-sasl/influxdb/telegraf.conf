
[[inputs.jolokia2_agent]]
  name_prefix = "kafka_"

  urls = ["http://quickstart.confluent.io:9170/jolokia/","http://quickstart.confluent.io:9270/jolokia/","http://quickstart.confluent.io:9370/jolokia/"]

  [[inputs.jolokia2_agent.metric]]
    name         = "controller"
    mbean        = "kafka.controller:name=*,type=*"
    field_prefix = "$1."

  [[inputs.jolokia2_agent.metric]]
    name         = "replica_manager"
    mbean        = "kafka.server:name=*,type=ReplicaManager"
    field_prefix = "$1."

  [[inputs.jolokia2_agent.metric]]
    name         = "purgatory"
    mbean        = "kafka.server:delayedOperation=*,name=*,type=DelayedOperationPurgatory"
    field_prefix = "$1."
    field_name   = "$2"

  [[inputs.jolokia2_agent.metric]]
    name         = "requestpersec"
    mbean        = "kafka.network:type=RequestMetrics,name=RequestsPerSec,request=*,version=*"
    tag_keys     = ["request"]

  [[inputs.jolokia2_agent.metric]]
    name     = "client"
    mbean    = "kafka.server:client-id=*,type=*"
    tag_keys = ["client-id", "type"]


  [[inputs.jolokia2_agent.metric]]
    name     = "requestqueuesize"
    mbean    = "kafka.network:type=RequestChannel,name=RequestQueueSize"

  [[inputs.jolokia2_agent.metric]]
    name     = "requesthandleravgidlepercent"
    mbean    = "kafka.server:type=KafkaRequestHandlerPool,name=RequestHandlerAvgIdlePercent"

  [[inputs.jolokia2_agent.metric]]
    name     = "replicafetchermanager"
    mbean    = "kafka.server:type=ReplicaFetcherManager,name=MaxLag,clientId=Replica"

  [[inputs.jolokia2_agent.metric]]
    name     = "fetcherlagmetrics"
    mbean    = "kafka.server:type=FetcherLagMetrics,name=ConsumerLag,clientId=*,topic=*,partition=*"
    tag_keys   = ["topic", "partition","clientId"]

  [[inputs.jolokia2_agent.metric]]
    name         = "request"
    mbean        = "kafka.network:name=*,request=*,type=RequestMetrics"
    field_prefix = "$1."
    tag_keys     = ["request"]

  [[inputs.jolokia2_agent.metric]]
    name         = "topics"
    mbean        = "kafka.server:name=*,type=BrokerTopicMetrics"
    field_prefix = "$1."

  [[inputs.jolokia2_agent.metric]]
    name         = "topic"
    mbean        = "kafka.server:name=*,topic=*,type=BrokerTopicMetrics"
    field_prefix = "$1."
    tag_keys     = ["topic"]

  [[inputs.jolokia2_agent.metric]]
    name       = "partition"
    mbean      = "kafka.log:name=*,partition=*,topic=*,type=Log"
    field_name = "$1"
    tag_keys   = ["topic", "partition"]

  [[inputs.jolokia2_agent.metric]]
    name       = "partition"
    mbean      = "kafka.cluster:name=UnderReplicated,partition=*,topic=*,type=Partition"
    field_name = "UnderReplicatedPartitions"
    tag_keys   = ["topic", "partition"]


# Configuration for sending metrics to InfluxDB
[[outputs.influxdb]]
## The full HTTP or UDP URL for your InfluxDB instance.
##
## Multiple URLs can be specified for a single cluster, only ONE of the
## urls will be written to each interval.
# urls = ["unix:///var/run/influxdb.sock"]
# urls = ["udp://127.0.0.1:8089"]
urls = ["http://quickstart.confluent.io:8086"]

## The target database for metrics; will be created as needed.
## For UDP url endpoint database needs to be configured on server side.
database = "kafka"

## If true, no CREATE DATABASE queries will be sent.  Set to true when using
## Telegraf with a user without permissions to create databases or when the
## database already exists.
# skip_database_creation = false
[[processors.rename]]
order = 0
[[processors.rename.replace]]
tag = "host"
dest = "telegraf"
[[processors.rename.replace]]
tag = "jolokia_agent_url"
dest = "host"


[[processors.regex]]
order = 1
[[processors.regex.tags]]
key = "host"
## All the power of the Go regular expressions available here
## For example, named subgroups
pattern = "^http://(?P<node>.*:[0-9]{1,4})/jolokia/$"
replacement = "${node}"